var path = require('path')
  , gulp  = require('gulp')
  , gutil = require('gulp-util')
  , through = require('through2')
  , crypto = require('crypto')
  , fse = require('fs-extra');


module.exports = function(options) {
  var separator,
      size , 
      ver_dir;

  if (typeof options === 'object') {
    separator = options.separator || '_';
    size = options.size | 0;
    ver_dir = options.ver_dir || '/ver';
  } else {
    size = options | 0;
    separator = '_';
    ver_dir = "/ver";
  }

  return through.obj(function(file, enc, cb) {
    if (file.isStream()) {
      this.emit('error', new gutil.PluginError('gulp-debug', 'Streaming not supported'));
      return cb();
    }

    var md5Hash = calcMd5(file, size),
      filename = path.basename(file.path),
      dir;

    if (file.path[0] == '.') {
      dir = path.join(file.base, file.path);
    } else {
      dir = file.path;
    }
    var relative_file_path = path.relative(path.join(process.cwd(),'/src'),dir);
    var ver_file_path = path.join(process.cwd(),ver_dir);
    dir = path.dirname(dir);
    /** 
    var ver_file = (new gutil.File({ cwd: "", base : "" , path: path.join(ver_file_path,relative_file_path)+".ver", contents: new Buffer(md5Hash) }))
    console.log(ver_file.relative);
    ver_file.pipe(gulp.dest('./'))
    **/
    var ver_file_all_pathname = path.join(ver_file_path,relative_file_path)+".ver";
    var ver_filedir = path.dirname(ver_file_all_pathname);
    fse.outputFile(ver_file_all_pathname, new Buffer(md5Hash),function(err){
        if (err) {
            console.error("写版本号错误＝＝＝＝",ver_file_all_pathname)
            throw err;
        }
    })
    filename = filename.split('.').map(function(item, i, arr) {
      return i == arr.length - 2 ? item + separator + md5Hash : item;
    }).join('.');

    var p = file.path = path.join(dir, filename);
    console.info("md5 fininsh====",p);
    this.push(file);
    cb();
  }, function(cb) {
    cb();
  });
};

function calcMd5(file, slice) {
  var md5 = crypto.createHash('md5');
  md5.update(file.contents, 'utf8');

  return slice > 0 ? md5.digest('hex').slice(0, slice) : md5.digest('hex');
}
