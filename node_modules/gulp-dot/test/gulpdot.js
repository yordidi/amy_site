/* jshint strict:false, maxlen: 1000 */
/* global describe:false */
describe('Gulp doT', function() {
  var gutil = require('gulp-util'),
      dot = require('../');

  require('should');

  it('changes extension to .html', function(done) {
    var gulpdot = dot(),
        file = new gutil.File({path: 'foo.dot', contents: new Buffer('bar')});
    gulpdot.end(file);
    gulpdot.once('data', function(file) {
      file.path.should.equal('foo.html');
      done();
    });
  });
  it('accepts runtime variables', function(done) {
    var gulpdot = dot({it: {name: 'foo'}}),
        file = new gutil.File({path: 'foo.dot', contents: new Buffer('My name is {{=it.name}}')});
    gulpdot.end(file);
    gulpdot.once('data', function(file) {
      file.contents.toString().should.equal('My name is foo');
      done();
    });
  });
  it('accepts compile-time variables', function(done) {
    var gulpdot = dot({def: {name: 'foo'}}),
        file = new gutil.File({path: 'foo.dot', contents: new Buffer('My name is {{#def.name}}')});
    gulpdot.end(file);
    gulpdot.once('data', function(file) {
      file.contents.toString().should.equal('My name is foo');
      done();
    });
  });
  it('accepts a layout', function(done) {
    var gulpdot = dot({layout: __dirname + '/fixtures/layout.dot'}),
        file = new gutil.File({path: 'foo.dot', contents: new Buffer('foo')});
    gulpdot.end(file);
    gulpdot.once('data', function(file) {
      file.contents.toString().should.equal('My name is foo');
      done();
    });
  });
  it('accepts a json frontmatter', function(done) {
    var gulpdot = dot(),
        file = new gutil.File({path: 'foo.dot', contents: require('fs').readFileSync(__dirname + '/fixtures/hasfrontmatter.dot')});
    gulpdot.end(file);
    gulpdot.once('data', function(file) {
      file.contents.toString().should.equal('My name is foo');
      done();
    });
  });
  it('accepts a json frontmatter used in layout', function(done) {
    var gulpdot = dot({layout: __dirname + '/fixtures/layout2.dot'}),
        file = new gutil.File({path: 'foo.dot', contents: new Buffer('{{{ "name": "foo" }}}!')});
    gulpdot.end(file);
    gulpdot.once('data', function(file) {
      file.contents.toString().should.equal('My name is foo!');
      done();
    });
  });
  it('loads partials with .dot extension', function(done) {
    var gulpdot = dot(),
        file = new gutil.File({path: __dirname + '/fixtures/foo.dot', base: __dirname + '/', contents: new Buffer('{{#def.loadfile(\'fixtures/hasfrontmatter.dot\')}}bar!')});
    gulpdot.end(file);
    gulpdot.once('data', function(file) {
      file.contents.toString().should.equal('My name is foobar!');
      done();
    });
  });
  it('loads partials ommitting .dot extension', function(done) {
    var gulpdot = dot(),
        file = new gutil.File({path: __dirname + '/fixtures/foo.dot', base: __dirname + '/', contents: new Buffer('{{#def.loadfile(\'fixtures/hasfrontmatter\')}}baz!')});
    gulpdot.end(file);
    gulpdot.once('data', function(file) {
      file.contents.toString().should.equal('My name is foobaz!');
      done();
    });
  });
});
