{
  "name": "gulp-rsync",
  "version": "0.0.5",
  "description": "Rsync tasks for deploying gulp file structures",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jerrysu/gulp-rsync.git"
  },
  "keywords": [
    "gulpplugin",
    "rsync",
    "ssh",
    "deploy",
    "deployment"
  ],
  "author": {
    "name": "Jerry Su",
    "email": "email@jerrysu.me"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jerrysu/gulp-rsync/issues"
  },
  "homepage": "https://github.com/jerrysu/gulp-rsync",
  "dependencies": {
    "better-assert": "^1.0.1",
    "lodash.every": "^2.4.1",
    "lodash.isstring": "^2.4.1",
    "gulp-util": "^3.0.0",
    "through2": "^0.6.1"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "mocha": "^1.21.4"
  },
  "readme": "## gulp-rsync\n\nUse the file transferring and syncing capabilities of rsync within your Gulp task.\n\n### Prerequisites\n\nrsync needs to be installed on your machine.\n\n### Installation\n\n```\nnpm install gulp-rsync --save-dev\n```\n\n### Usage\n\n```js\nvar gulp = require('gulp');\nvar rsync = require('gulp-rsync');\n\ngulp.task('deploy', function() {\n  gulp.src('build/**')\n    .pipe(rsync({\n      root: 'build',\n      hostname: 'example.com',\n      destination: '/path/to/site'\n    }));\n});\n```\n\n### API\n\n#### `rsync(options)`\n\n##### `options`\n\n###### `destination`\n\nType: `string`, **Required**\n\nThe destination path. Use `hostname` when using a remote path.\n\n###### `root`\n\nType: `string`, Default: `process.cwd()`\n\nSpecifying a root path changes the path names that are transferred to the\ndestination. The paths piped into rsync must be within the root path (or the\nplugin will yell at you).\n\n```js\ngulp.src('build/js/**']).pipe(rsync({destination: '/tmp'});\n```\n\nThis will create the directory `build` in `/tmp` as well as the directory `js`\nin `/tmp/build`.\n\n```js\ngulp.src('build/js/**']).pipe(rsync({root: 'build', destination: '/tmp'});\n```\n\nThis will create the directory `js` in `/tmp`.\n\n###### `hostname`\n\nType: `string`\n\nThe hostname of the destination. rsync will connect to this hostname using SSH\nalong with configuration in `~/.ssh/config` or SSH keys stored in a keychain.\n\nWhen this is omitted, rsync will transfer the content to a local path.\n\n###### `username`\n\nType: `string`\n\nUsed to specify a user for the remote host.\n\n###### `shell`\n\nType: `string`\n\nTypically, rsync is configured to use `ssh` by default, but you may prefer to\nuse `rsh` on a local network.\n\n###### `port`\n\nType: `integer`\n\nUsed to specify an SSH port for the remote host. Note: This will override the\nshell option and force the use of `ssh`.\n\n###### `incremental`\n\nType: `boolean`, Default: `false`\n\nIf set to `true`, rsync will make incremental updates only. rsync will use the\nchecksum of every file to determine whether a file needs to be updated. This\nwill add a delay to the transfer, but will minimize the amount of files\ntransferred each time.\n\n###### `progress`\n\nType: `boolean`, Default: `false`\n\nIf set to `true`, the transfer progress for each file will be displayed in the\nconsole.\n\nThis looks like:\n\n```\n[20:49:53] gulp-rsync: Starting rsync to example.com:/var/www/example.com/html/...\n[20:49:53] gulp-rsync: favicon.ico \n[20:49:53] gulp-rsync:         1150 100%  439.45kB/s    0:00:00 (xfer#1, to-check=12/13) \n[20:49:53] gulp-rsync: index.html \n[20:49:53] gulp-rsync:         2712 100%  101.86kB/s    0:00:00 (xfer#2, to-check=11/13) \n[20:49:53] gulp-rsync: css/style.1afca52f.css \n[20:49:53] gulp-rsync:         1445 100%   54.27kB/s    0:00:00 (xfer#3, to-check=9/13) \n[20:49:53] gulp-rsync: images/photo1.82515393.jpg \n[20:49:53] gulp-rsync:        31878 100%    1.09MB/s    0:00:00 (xfer#7, to-check=3/13) \n[20:49:53] gulp-rsync: images/photo2.2a41e1e3.jpg \n[20:49:53] gulp-rsync:        76988 100%    2.53MB/s    0:00:00 (xfer#9, to-check=1/13) \n[20:49:53] gulp-rsync:  \n[20:49:53] gulp-rsync: sent 2401 bytes  received 2820 bytes  10442.00 bytes/sec \n[20:49:53] gulp-rsync: total size is 114173  speedup is 57.01 \n[20:49:53] gulp-rsync: Completed rsync.\n```\n\n###### `relative`\n\nType: `boolean`, Default: `true`\n\nBy default, gulp-rsync will transfer all paths relative to the `root` specified.\nIf you want to transfer assets from multiple paths to a single destination, you\ncan set `relative` to `false`.\n\n```js\ngulp.src(['build/js/**/*.js', 'build/css/**/*.css', 'build/images/**'])\n  .pipe(rsync({\n    hostname: 'example.cdn',\n    destination: '/path/to/all/assets',\n    relative: false\n  });\n```\n\nThis will transfer all assets (*.js, *.css, and images) into a single directory.\n\n###### `emptyDirectories`\n\nType: `boolean`, Default: `false`\n\nIf set to `true`, rsync will create empty directories.\n\n###### `times`\n\nType: `boolean`, Default: `false`\n\nPreserves times of the transferred files.\n\n###### `compress`\n\nType: `boolean`, Default: `false`\n\nCompresses file data during transfer.\n\n###### `recursive`\n\nType: `boolean`, Default: `false`\n\nIf set to `true`, rsync will transfer all files and subdirectories recursively.\nThis is not necessary when using glob(s) with `gulp.src()`. However, it can be\ncombined with non-globbed paths to transfer all files:\n\n```\ngulp.src(['build/js', 'build/css', 'build/images'])\n  .pipe(rsync({\n    root: 'build',\n    destination: '/tmp',\n    recursive: true\n  });\n```\n\nThis is the same as:\n\n```\ngulp.src(['build/js/**', 'build/css/**', 'build/images/**'])\n  .pipe(rsync({\n    root: 'build',\n    destination: '/tmp'\n  });\n```\n\nThe difference is that the actual `rsync` command used in the first example is\nmuch shorter.\n\n###### clean\n\nType: `boolean`, Default: `false`\n\nThis must be used with `recursive` set to `true`. If set to `true`, this\ninstructs rsync to delete all files and directories that are not in the source\npaths. **Be careful with this option as it could lead to data loss.**\n\n###### `exclude`\n\nType: `string|Array<string>`\n\nEnables files or directories matching the pattern(s) provided to be excluded\nfrom the transfer. This is probably most useful when `recursive` is set to\n`true` since it is typically better to make these exclusions in `gulp.src()`.\n\n###### `include`\n\nType: `string|Array<string>`\n\nUsed with `exclude`. This adds exceptions for the exclusions.\n\nFor example:\n\n```\ngulp.src('build')\n  .pipe(rsync({\n    root: 'build',\n    destination: '/tmp',\n    recursive: true,\n    exclude: ['*.css', '*.js'],\n    include: ['*.min.css', '*.min.js']\n  });\n```\n\nThis will transfer only minified CSS and JS files.\n\n###### `update`\n\nType: `boolean`, Default: `false`\n\nSkip files that are newer on the receiving end.\n\n###### `silent`\n\nType: `boolean`, Default: `false`\n\nTurns off logging.\n\n#### License\n\n> The MIT License (MIT)\n>\n> Copyright © 2014 Jerry Su, http://jerrysu.me\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy of\n> this software and associated documentation files (the “Software”), to deal in\n> the Software without restriction, including without limitation the rights to\n> use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n> the Software, and to permit persons to whom the Software is furnished to do so,\n> subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in all\n> copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n> FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n> COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n> IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n> CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "gulp-rsync@0.0.5",
  "_from": "gulp-rsync@"
}
